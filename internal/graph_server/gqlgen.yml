schema:
  - ./schema/base.graphql
  - ../../module/*/*/*.graphql

exec:
  filename: ./generated/generated.go
  package: generated

#federation:
#  filename: ./generated/federation.go
#  package: generated

model:
  filename: ../dao/model/base_gen.go
  package: model

resolver:
  layout: follow-schema
  dir:  ./graph
  package: graph
  filename_template: "{name}.resolvers.go"
  # Optional: turn on to not generate template comments above resolvers
  # omit_template_comment: false

# Optional: turn off to make struct-type struct fields not use pointers
# e.g. type Thing struct { FieldA OtherThing } instead of { FieldA *OtherThing }
# struct_fields_always_pointers: false

# Optional: set to speed up generation time by not performing a final validation pass.
skip_validation: true

skip_mod_tidy: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - "xyu-graphql/internal/dao/model"

# This section declares type mapping between the GraphQL and go type systems
#

# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  BookServer:
    model:
      - ../dao/model/model_gen.Book
  TodoServer:
    model:
      - ../dao/model/model_gen.Todo
  UserServer:
    model:
      - ../dao/model/model_gen.User
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Int64:
    model:
      - github.com/99designs/gqlgen/graphql.Int64